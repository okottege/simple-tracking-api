# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  testProjects: 'Tests/**/*.csproj'
  sqlScriptCombineProject: 'Build/TrackerService.BuildTools/TrackerService.BuildTools.csproj'
  sqlFilesFolder: '$(Parameters.SqlFilesFolder)'
  combinedSqlScriptFileName: '$(Parameters.CombinedSqlScriptFileName)'
  combinedSqlScriptArtifactPath: '$(System.ArtifactsDirectory)/sql/$(combinedSqlScriptFileName)'

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'b962112b-308d-4fc4-96b8-ef084398eea2'
  imageRepository: 'okottegesimpletrackingapi'
  containerRegistry: 'trackingservice.azurecr.io'
  dockerfilePath: 'TrackerService.Api/multi-stage.DOCKERFILE'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Namespace
  k8sNamespace: 'default'
  imagePullSecret: 'trackingserviceca90-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreInstaller@0
      inputs:
        version: '2.2.300'
    
    - task: DotNetCoreCLI@2
      displayName: Restore unit test projects
      inputs:
        command: restore
        projects: $(testProjects)

    - task: DotNetCoreCLI@2
      displayName: Run unit tests
      inputs:
        command: test
        projects: $(testProjects)
        arguments: '--logger trx'
    
    - task: DotNetCoreCLI@2
      displayName: Restore Combine SQL scripts project
      inputs:
        command: restore
        projects: $(sqlScriptCombineProject)
    
    - task: DotNetCoreCLI@2
      displayName: Combine SQL upgrade scripts
      inputs:
        command: run
        arguments: '--project $(sqlScriptCombineProject) tracksvc-util sql-script-combine -sff $(sqlFilesFolder) -o $(combinedSqlScriptFileName)'
        
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: .
        tags: |
          $(tag)
          
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'manifests'
        targetPath: 'manifests'
    
    - task: PublishPipelineArtifact@0
      displayName: Publish combined sql upgrade script file
      inputs:
        artifactName: sql
        targetPath: $(combinedSqlScriptFileName)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'okottegesimpletrackingapi-2030.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'
          
          - task: DotNetCoreCLI@2
            displayName: Upgrade Database
            inputs:
              command: run
              arguments: '--project $(sqlScriptCombineProject) tracksvc-util database-upgrade -sf $(combinedSqlScriptArtifactPath)'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: KubernetesManifest@0
            displayName: Create secrets for Azure Key vault
            inputs:
              action: createSecret
              secretName: keyvaultsecrets
              secretType: generic
              namespace: $(k8sNamespace)
              secretArguments: --from-literal=keyvaultClientId=$(KeyVaultClientId) --from-literal=keyvaultClientSecret=$(KeyVaultClientSecret)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
